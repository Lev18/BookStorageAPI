  id;
  bookId;
  title;
  series;
  rating;
  description;
  language;
  isbn;
  edition;
  pages;
  publishDate;
  firstPublishDate;
  numRatings;
  likedPercent;
  coverImg;
  bbeScore;
  bbeVotes;
  price;
  author_id;
// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table book {
  id integer [primary key]
  bookId varchar
  title varchar
  series varchar
  rating integer
  description varchar
  language varchar
  isbn varchar
  edition varchar
  pages integer
  publishDate timestamp
  firstPublishDate timestamp
  numRatings integer
  likedPercent integer
  coverImg varchar
  bbeScore integer
  bbeVotes  integer
  price double
  author_id integer [not null]
  series_id integer
  publsher_id integer [not null]
}

Table author {
  id integer [primary key]
  author_name varchar
}

Table book_author {
  id integer [primary key]
  book_id integer [not null]
  author_id integer [not null]
}

Table format {
  id integer [primary key]
  book_format varchar
}

Table book_format {
  id integer [primary key]
  book_id integer [not null]
  format_id integer [not null]
}

Table characters{
  id integer [primary key]
  charName varchar
  series_id integer
}


Table book_character {
  id integer [primary key]
  book_id integer [not null]
  character_id integer [not null]
}


Table series {
  id integer [primary key]
  ser_name varchar
}

Table series_character {
  id integer [primary key]
  series_id integer [not null]
  character_id integer [not null]
}

Table publisher {
  id integer [primary key]
  publisher_name varchar
}

Table book_publisher {
  id integer [primary key]
  book_id integer [not null]
  publisher_id integer [not null]
}


Table awards {
  id integer [primary key]
  award_title varchar
}

Table book_award {
  id integer [primary key]
  book_id integer [not null]
  award_id integer [not null]
  book_award_title varchar
}


Table genre {
  id integer [primary key]
  genre_title varchar
}


Table book_genre {
  id integer [primary key]
  book_id integer [not null]
  genre_id integer [not null]
}

Table setting {
  id integer [primary key]
  setting_loc varchar
}


Table book_setting {
  id integer [primary key]
  book_id integer [not null]
  setting_id integer [not null]
}

Table ratingsByStars {
  id integer [primary key]
  book_id integer [not null]
  stars varchar
}

Ref: book.id < book_author.book_id
Ref: author.id < book_author.author_id


Ref: book.id < book_format.book_id
Ref: format.id < book_format.format_id


Ref: book.id < book_character.book_id
Ref: characters.id < book_character.character_id

Ref: book.id < book_award.book_id
Ref: awards.id < book_award.award_id

Ref: book.id < ratingsByStars.book_id


Ref: book.id < book_genre.book_id
Ref: genre.id < book_genre.genre_id

Ref: book.id < book_setting.book_id
Ref: setting.id < book_setting.setting_id

Ref:book.id < book_publisher.book_id
Ref: publisher.id < book_publisher.publisher_id

Ref: series.id < book.series_id
Ref: series.id < series_character.series_id
Ref: characters.id < series_character.character_id
//Ref: "series"."id" < "series"."ser_name"


custom errors exceptions in controller
getAllGenres go to repository
/book/author/publisher
/if i want resource by identifier  should throws an error if it doesn't exist

/ book global api for book updates for every resource (book author publisher)
/download images async with bookcsv upload in db
// rename exceptions name add Exception into them
// url checking
//  
4bc5a708-447