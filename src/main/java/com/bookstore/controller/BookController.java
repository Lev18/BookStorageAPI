package com.bookstore.controller;import com.bookstore.criteria.BookSearchCriteria;import com.bookstore.dto.requestDto.AwardDto;import com.bookstore.dto.responseDto.BookFlatRecord;import com.bookstore.dto.responseDto.BookInfoDTO;import com.bookstore.dto.responseDto.BookResponseDto;import com.bookstore.dto.responseDto.PageResponseDto;import com.bookstore.entity.Book;import com.bookstore.service.BookService;import com.bookstore.service.BookUploadService;import jakarta.validation.Valid;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.io.IOException;import java.util.List;@Slf4j@RestController@RequestMapping(path = "/api/books")@RequiredArgsConstructorpublic class BookController {    private final BookUploadService bookUploadService;    private final BookService bookService;    @PostMapping(path = "/file", consumes = {"multipart/form-data"})    public ResponseEntity<?> uploadBookStore(@RequestPart("file") MultipartFile file) {        long startTime = System.nanoTime();        int savedBooks = bookUploadService.uploadAndSaveFile(file);        long endTime = System.nanoTime();        log.info("saved book completed in {} s", (endTime - startTime)/1_000_000_000.0);        if (savedBooks == 0) {            return ResponseEntity.status(HttpStatus.NO_CONTENT).build();        }        return ResponseEntity.ok(savedBooks + " new  books were saved\n");    }    @PostMapping (path = "/image/download")    public ResponseEntity<?> uploadImg() throws InterruptedException {        // TODO:        bookService.uploadImg();        return ResponseEntity.ok(" images was downloaded successfully");    }    @PostMapping(path = "")    public ResponseEntity<?> insertBook(@RequestBody BookInfoDTO bookInfoDTO) {        int savedBooks = bookService.insetNewBook(bookInfoDTO);        if (savedBooks == 0) {            return ResponseEntity.status(HttpStatus.NO_CONTENT).build();        }        return ResponseEntity.ok(savedBooks + " new  books were saved\n");    }    @DeleteMapping(path = "{bookIsbn}")    public ResponseEntity<?> deleteBookByISBN(@PathVariable String bookIsbn) {        BookInfoDTO bookInfoDTO = bookService.deleteBookByISBN(bookIsbn);        if (bookInfoDTO == null) {            return ResponseEntity.status(HttpStatus.NO_CONTENT).build();        }        return ResponseEntity.ok().body(bookInfoDTO);    }    @GetMapping(path = "/image/{bookIsbn}")    public ResponseEntity<?> getBookImage(@PathVariable String bookIsbn) throws IOException {        byte[] img = bookService.getBookImg(bookIsbn);        if (img == null || img.length == 0) {            return ResponseEntity.status(HttpStatus.NO_CONTENT).build();        }        return ResponseEntity.ok()                .contentType(MediaType.IMAGE_JPEG)                .body(img);    }    @GetMapping(path = "/show/book/{isbn}")    public ResponseEntity<BookInfoDTO> getBookByISBN(@PathVariable String isbn) {        BookInfoDTO bookInfoDTO = bookService.getBookByISBN(isbn);        if (bookInfoDTO == null) {            return ResponseEntity.status(HttpStatus.NO_CONTENT).build();        }        return ResponseEntity.ok().body(bookInfoDTO);    }    @PutMapping(path = "/rating/{bookIsbn}/{newRate}")    public ResponseEntity<?> updateBookRating(@PathVariable String bookIsbn,                                              @PathVariable Integer newRate) {        Book updatedBook = bookService.updateBookRating(bookIsbn, newRate);        if (updatedBook == null) {            return ResponseEntity.status(HttpStatus.NO_CONTENT).body("Book not found\n");        }        return ResponseEntity.ok(updatedBook.getBookId() + " book's rating was updated successfully");    }    @PostMapping(path = "/newAward/{bookIsbn}")    public ResponseEntity<?> addNewAward(@PathVariable String bookIsbn,  @Valid @RequestBody AwardDto newAward) {        String bookInfoDTO = bookService.addNewAward(bookIsbn, newAward);        if (bookInfoDTO == null) {            return ResponseEntity.status(HttpStatus.NO_CONTENT).body("Book not found\n");        }        return ResponseEntity.ok(newAward.getAward() + " award added " + bookInfoDTO +" successfully");    }    @GetMapping(path = "/search")    public PageResponseDto<BookResponseDto> findAllBooksByCriteria(BookSearchCriteria bookSearchCriteria) {        return  bookService.findAllByCriteria(bookSearchCriteria);    }}